import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from dotenv import load_dotenv
from booking_data import BookingData
from follow_up import init_scheduler
from admin_notifier import notify_admin

# Load environment
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not set in .env")
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
if not ADMIN_CHAT_ID:
    raise RuntimeError("ADMIN_CHAT_ID not set in .env")
ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)

# Initialize bot and dispatcher
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# Storage for user bookings
user_data: dict[int, BookingData] = {}

# /start handler
def reply_menu(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('‚ÑπÔ∏è –û —Å—Ç—É–¥–∏–∏'), KeyboardButton('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ'))
    return message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å—Ç—É–¥–∏–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=kb)

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    await reply_menu(message)

@dp.message(lambda m: m.text == '‚ÑπÔ∏è –û —Å—Ç—É–¥–∏–∏')
async def studio_info(message: types.Message):
    text = '–ù–∞—à–∞ —Å—Ç—É–¥–∏—è: —Ñ–∏—Ç–Ω–µ—Å, —Ç–∞–Ω—Ü—ã, –π–æ–≥–∞. –í—ã–±–µ—Ä–∏—Ç–µ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ".'
    await message.answer(text)

@dp.message(lambda m: m.text == 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ')
async def book_start(message: types.Message):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', callback_data='CALL_ADMIN'))
    kb.add(InlineKeyboardButton('üñ• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞', callback_data='BOOK'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=kb)

@dp.callback_query(lambda c: c.data == 'CALL_ADMIN')
async def call_admin(cb: types.CallbackQuery):
    await cb.message.answer('–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ –Ω–æ–º–µ—Ä—É +7XXX')
    await cb.answer()

@dp.callback_query(lambda c: c.data == 'BOOK')
async def book_flow(cb: types.CallbackQuery):
    user_data[cb.from_user.id] = BookingData()
    user_data[cb.from_user.id].step = 'ask_goal'
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('–§–∏—Ç–Ω–µ—Å', '–¢–∞–Ω—Ü—ã', '–ô–æ–≥–∞', '–î—Ä—É–≥–æ–µ')
    await cb.message.answer('–î–ª—è —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è?', reply_markup=kb)
    await cb.answer()

@dp.message(lambda m: True)
async def handle_steps(message: types.Message):
    uid = message.from_user.id
    if uid not in user_data:
        return
    data = user_data[uid]

    if data.step == 'ask_goal':
        data.goal = message.text
        data.step = 'ask_direction'
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add('–§–∏—Ç–Ω–µ—Å', '–¢–∞–Ω—Ü—ã', '–ô–æ–≥–∞', '–î—Ä—É–≥–æ–µ')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=kb)
        return

    if data.step == 'ask_direction':
        data.direction = message.text
        data.step = 'ask_name'
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        return

    if data.step == 'ask_name':
        data.name = message.text
        data.step = 'ask_phone'
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True))
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:', reply_markup=kb)
        return

    if data.step == 'ask_phone' and message.contact:
        data.phone = message.contact.phone_number
        data.step = 'confirm'
        confirm_text = (
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–ò–º—è: {data.name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.phone}\n"
            f"–¶–µ–ª—å: {data.goal}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.direction}"
        )
        await message.answer(confirm_text)
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='CONFIRM'))
        kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='CANCEL'))
        await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?', reply_markup=kb)
        return

@dp.callback_query(lambda c: c.data == 'CONFIRM')
async def confirm(cb: types.CallbackQuery):
    data = user_data.pop(cb.from_user.id)
    await notify_admin(bot, data)
    await cb.message.answer('–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞.')
    await cb.answer()

@dp.callback_query(lambda c: c.data == 'CANCEL')
async def cancel(cb: types.CallbackQuery):
    user_data.pop(cb.from_user.id, None)
    await cb.message.answer('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    await cb.answer()

# Scheduler for follow-ups
init_scheduler(bot)

if __name__ == '__main__':
    dp.run_polling(bot)
