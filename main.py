import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from dotenv import load_dotenv
from booking_data import BookingData
from follow_up import init_scheduler
from admin_notifier import notify_admin

# Load environment
load_dotenv()
BOT_TOKEN = os.getenv(7789111664:AAHFxzibymG5omwu7kI1N-oSOy1j4rscGr4)
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# In-memory storage
user_data = {}

# Start handler
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('‚ÑπÔ∏è –û —Å—Ç—É–¥–∏–∏'), KeyboardButton('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ'))
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å—Ç—É–¥–∏–∏. –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å—Ç—É–¥–∏–∏ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ.',
        reply_markup=keyboard
    )

# Info handler
@dp.message(lambda msg: msg.text == '‚ÑπÔ∏è –û —Å—Ç—É–¥–∏–∏')
async def studio_info(message: types.Message):
    await message.answer(
        '–ù–∞—à–∞ —Å—Ç—É–¥–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–Ω—è—Ç–∏—è –ø–æ —Ä–∞–∑–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º: —Ñ–∏—Ç–Ω–µ—Å, —Ç–∞–Ω—Ü—ã, –π–æ–≥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ" –∏ —è –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø–∏—Å—å.'
    )

# Booking start
@dp.message(lambda msg: msg.text == 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ')
async def book_start(message: types.Message):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', callback_data='CALL_ADMIN'))
    kb.add(InlineKeyboardButton('üñ• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞', callback_data='BOOK_VIA_BOT'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=kb)

# Call admin
@dp.callback_query(lambda c: c.data == 'CALL_ADMIN')
async def call_admin(cb: types.CallbackQuery):
    await cb.message.answer('–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É: +7XXX')
    await cb.answer()

# Booking via bot: ask goal
@dp.callback_query(lambda c: c.data == 'BOOK_VIA_BOT')
async def book_via_bot(cb: types.CallbackQuery):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('–•–æ—á—É —É–∫—Ä–µ–ø–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ', '–•–æ—á—É –Ω–∞—É—á–∏—Ç—å—Å—è —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å')
    kb.add('–•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å', '–î—Ä—É–≥–æ–µ')
    user_data[cb.from_user.id] = BookingData()
    await cb.message.answer('–î–ª—è —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è?', reply_markup=kb)
    user_data[cb.from_user.id].step = 'ask_goal'
    await cb.answer()

# Generic handler
@dp.message(lambda msg: True)
async def handle_steps(message: types.Message):
    uid = message.from_user.id
    if uid not in user_data:
        return
    data = user_data[uid]

    if data.step == 'ask_goal':
        data.goal = message.text
        data.step = 'ask_direction'
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add('–§–∏—Ç–Ω–µ—Å', '–¢–∞–Ω—Ü—ã', '–ô–æ–≥–∞', '–î—Ä—É–≥–æ–µ')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:', reply_markup=kb)
        return

    if data.step == 'ask_direction':
        data.direction = message.text
        data.step = 'ask_name'
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç):')
        return

    if data.step == 'ask_name':
        data.name = message.text
        data.step = 'ask_phone'
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True))
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É:', reply_markup=kb)
        return

    if message.contact and data.step == 'ask_phone':
        data.phone = message.contact.phone_number
        data.step = 'confirm'
        # Properly close the f-string and parentheses
        await message.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:
"
            f"–ò–º—è: {data.name}
"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.phone}
"
            f"–¶–µ–ª—å: {data.goal}
"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.direction}"
        )
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='CONFIRM'))
        kb.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='CANCEL'))
        await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–ø–∏—Å—å?', reply_markup=kb)
        return

# Confirmation
@dp.callback_query(lambda c: c.data == 'CONFIRM')
async def confirm(cb: types.CallbackQuery):
    uid = cb.from_user.id
    data = user_data.pop(uid)
    # Notify admin
    await notify_admin(bot, data)
    await cb.message.answer('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.')
    await cb.answer()

@dp.callback_query(lambda c: c.data == 'CANCEL')
async def cancel(cb: types.CallbackQuery):
    user_data.pop(cb.from_user.id, None)
    await cb.message.answer('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    await cb.answer()

# Initialize follow-ups
init_scheduler(bot)

# Run bot
if __name__ == '__main__':
    dp.run_polling(bot)
